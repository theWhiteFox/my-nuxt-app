import { FetchRequest, FetchOptions, FetchResponse } from 'ohmyfetch';
import { Preset } from 'unenv';
import { Unimport, UnimportOptions } from 'unimport';
import { PluginVisualizerOptions } from 'rollup-plugin-visualizer';
import { Hookable, NestedHooks } from 'hookable';
import { Consola, LogLevel } from 'consola';
import { NodeFileTraceOptions } from '@vercel/nft';
import { InputOptions, OutputOptions } from 'rollup';
import { Loader } from 'esbuild';
import { FilterPattern } from '@rollup/pluginutils';
import * as h3 from 'h3';
import { Handler, Middleware } from 'h3';
import { Worker } from 'worker_threads';
import { ListenOptions, Listener } from 'listhen';

interface InternalApi {
}
declare type ValueOf<C> = C extends Record<any, any> ? C[keyof C] : never;
declare type MatchedRoutes<Route extends string> = ValueOf<{
    [key in keyof InternalApi]: Route extends key | `${key}/${string}` | '/' ? key : never;
}>;
declare type MiddlewareOf<Route extends string> = Exclude<InternalApi[MatchedRoutes<Route>], Error | void>;
declare type TypedInternalResponse<Route, Default> = Default extends string | boolean | number | null | void | object ? Default : Route extends string ? MiddlewareOf<Route> extends never ? Default : MiddlewareOf<Route> : Default;
interface $Fetch<DefaultT = unknown, DefaultR extends FetchRequest = FetchRequest> {
    <T = DefaultT, R extends FetchRequest = DefaultR>(request: R, opts?: FetchOptions): Promise<TypedInternalResponse<R, T>>;
    raw<T = DefaultT, R extends FetchRequest = DefaultR>(request: R, opts?: FetchOptions): Promise<FetchResponse<TypedInternalResponse<R, T>>>;
}
declare global {
    var $fetch: $Fetch;
    namespace NodeJS {
        interface Global {
            $fetch: $Fetch;
        }
    }
}

interface NodeExternalsOptions {
    inline?: string[];
    external?: string[];
    outDir?: string;
    trace?: boolean;
    traceOptions?: NodeFileTraceOptions;
    moduleDirectories?: string[];
    exportConditions?: string[];
    traceInclude?: string[];
}

interface StorageOptions {
    mounts: {
        [path: string]: {
            driver: 'fs' | 'http' | 'memory';
            driverOptions?: Record<string, any>;
        };
    };
}

declare type RollupConfig = InputOptions & {
    output: OutputOptions;
};

declare type Options = {
    include?: FilterPattern;
    exclude?: FilterPattern;
    sourceMap?: boolean;
    minify?: boolean;
    target?: string | string[];
    jsxFactory?: string;
    jsxFragment?: string;
    define?: {
        [k: string]: string;
    };
    /**
     * Use this tsconfig file instead
     * Disable it by setting to `false`
     */
    tsconfig?: string | false;
    /**
     * Map extension to esbuild loader
     * Note that each entry (the extension) needs to start with a dot
     */
    loaders?: {
        [ext: string]: Loader | false;
    };
};

interface NitroHandlerConfig {
    /**
     * Path prefix or route
     */
    route?: string;
    /**
     * Use lazy loading to import handler
     */
    lazy?: boolean;
    /**
     * Handler
     *
     * Note: Handler as function only works during development and will be removed from production bundle
     */
    handler: string | Handler;
}

interface Nitro {
    options: NitroOptions;
    scannedHandlers: NitroHandlerConfig[];
    vfs: Record<string, string>;
    hooks: Hookable<NitroHooks>;
    unimport?: Unimport;
    logger: Consola;
}
interface NitroHooks {
    'nitro:document': (htmlTemplate: {
        src: string;
        contents: string;
        dst: string;
    }) => void;
    'nitro:rollup:before': (nitro: Nitro) => void | Promise<void>;
    'nitro:compiled': (nitro: Nitro) => void;
    'nitro:dev:reload': () => void;
    'close': () => void;
}
declare type DeepPartial<T> = T extends Record<string, any> ? {
    [P in keyof T]?: DeepPartial<T[P]> | T[P];
} : T;
declare type NitroPreset = NitroConfig | ((input: NitroConfig) => NitroConfig);
interface NitroConfig extends DeepPartial<NitroOptions> {
    extends?: string | string[];
}
interface NitroRouteRule {
    swr?: number;
    redirect?: string;
}
interface PublicAssetDir {
    baseURL?: string;
    fallthrough?: boolean;
    maxAge: number;
    dir: string;
}
interface ServerAssetDir {
    baseName: string;
    dir: string;
}
interface NitroOptions {
    _config: NitroConfig;
    dev: boolean;
    preset: string;
    logLevel: LogLevel;
    runtimeConfig: {
        public: any;
        private: any;
    };
    app: {
        baseURL: string;
        cdnURL: string;
        buildAssetsDir: string;
    };
    rootDir: string;
    srcDir: string;
    scanDirs: string[];
    buildDir: string;
    output: {
        dir: string;
        serverDir: string;
        publicDir: string;
    };
    storage: StorageOptions;
    timing: boolean;
    renderer: string;
    serveStatic: boolean;
    experimental?: {
        wasm?: boolean;
    };
    serverAssets: ServerAssetDir[];
    publicAssets: PublicAssetDir[];
    handlers: NitroHandlerConfig[];
    routes: {
        [path: string]: NitroRouteRule;
    };
    prerender: {
        crawlLinks: boolean;
        routes: string[];
    };
    entry: string;
    unenv: Preset;
    alias: Record<string, string>;
    minify: boolean;
    inlineDynamicImports: boolean;
    sourceMap: boolean;
    node: boolean;
    rollupConfig?: RollupConfig;
    moduleSideEffects: string[];
    autoImport: UnimportOptions;
    esbuild?: {
        options?: Options;
    };
    externals: boolean | NodeExternalsOptions;
    analyze: false | PluginVisualizerOptions;
    replace: Record<string, string | ((id: string) => string)>;
    hooks: NestedHooks<NitroHooks>;
    nodeModulesDirs: string[];
    commands: {
        preview: string;
        deploy: string;
    };
}

declare function prepare(nitro: Nitro): Promise<void>;
declare function copyPublicAssets(nitro: Nitro): Promise<void>;
declare function build(nitro: Nitro): Promise<void | {
    entry: string;
}>;
declare function writeTypes(nitro: Nitro): Promise<void>;

declare function createNitro(config?: NitroConfig): Promise<Nitro>;

declare const GLOB_SCAN_PATTERN = "**/*.{ts,mjs,js,cjs}";
declare type FileInfo = {
    dir: string;
    name: string;
    path: string;
};
declare function scanHandlers(nitro: any): Promise<{
    dirs: string[];
    files: FileInfo[];
    handlers: NitroHandlerConfig[];
}[]>;
declare function scanMiddleware(nitro: Nitro): Promise<{
    dirs: string[];
    files: FileInfo[];
    handlers: NitroHandlerConfig[];
}>;
declare function scanAPI(nitro: Nitro): Promise<{
    dirs: string[];
    files: FileInfo[];
    handlers: NitroHandlerConfig[];
}>;

interface NitroWorker {
    worker: Worker;
    address: {
        host: string;
        port: number;
        socketPath?: string;
    };
}
declare function createDevServer(nitro: Nitro): {
    reload: () => Promise<void>;
    listen: (port: ListenOptions['port'], opts?: Partial<ListenOptions>) => Promise<Listener>;
    app: h3.App;
    close: () => Promise<void>;
    watch: () => void;
    setLegacyMiddleware: (input: Middleware) => void;
    setDevMiddleware: (input: Middleware) => void;
};

declare function loadOptions(userConfig?: NitroConfig): Promise<NitroOptions>;
declare function defineNitroConfig(config: NitroConfig): NitroConfig;

declare function prerender(nitro: Nitro): Promise<void>;

export { $Fetch, GLOB_SCAN_PATTERN, InternalApi, MatchedRoutes, MiddlewareOf, Nitro, NitroConfig, NitroHandlerConfig, NitroHooks, NitroOptions, NitroPreset, NitroRouteRule, NitroWorker, PublicAssetDir, ServerAssetDir, TypedInternalResponse, ValueOf, build, copyPublicAssets, createDevServer, createNitro, defineNitroConfig, loadOptions, prepare, prerender, scanAPI, scanHandlers, scanMiddleware, writeTypes };
