import { resolve } from 'pathe';
import { getNitroContext, createDevServer, resolveMiddleware, build, prepare, generate, scanMiddleware, writeTypes, wpfs } from '@nuxt/nitro';
import { I as ImportProtectionPlugin } from './index.mjs';
import 'hookable';
import '@nuxt/kit';
import 'fs';
import 'knitwork';
import 'escape-string-regexp';
import 'url';
import 'ufo';
import 'scule';
import 'unplugin';
import 'mlly';
import 'magic-string';
import 'defu';
import 'globby';
import '@vue/shared';
import 'unimport';
import 'module';
import 'unctx/transform';
import 'chokidar';
import 'perfect-debounce';
import 'untyped';

function initNitro(nuxt) {
  const nitroOptions = nuxt.options.nitro || {};
  const nitroContext = getNitroContext(nuxt.options, nitroOptions);
  const nitroDevContext = getNitroContext(nuxt.options, { ...nitroOptions, preset: "dev" });
  nuxt.server = createDevServer(nitroDevContext);
  if (nuxt.vfs) {
    nitroContext.vfs = nuxt.vfs;
    nitroDevContext.vfs = nuxt.vfs;
  }
  nuxt.hooks.addHooks(nitroContext.nuxtHooks);
  nuxt.hook("close", () => nitroContext._internal.hooks.callHook("close"));
  nitroContext._internal.hooks.hook("nitro:document", (template) => nuxt.callHook("nitro:document", template));
  nitroContext._internal.hooks.hook("nitro:generate", (ctx) => nuxt.callHook("nitro:generate", ctx));
  nuxt.hooks.addHooks(nitroDevContext.nuxtHooks);
  nuxt.hook("close", () => nitroDevContext._internal.hooks.callHook("close"));
  nitroDevContext._internal.hooks.hook("nitro:document", (template) => nuxt.callHook("nitro:document", template));
  nitroDevContext._internal.hooks.hook("nitro:rollup:before", (ctx) => {
    ctx.rollupConfig.plugins.push(ImportProtectionPlugin.rollup({
      rootDir: nuxt.options.rootDir,
      patterns: [
        ...["#app", /^#build(\/|$)/].map((p) => [p, "Vue app aliases are not allowed in server routes."])
      ]
    }));
  });
  nuxt.hook("prepare:types", (opts) => {
    opts.references.push({ path: resolve(nuxt.options.buildDir, "types/nitro.d.ts") });
  });
  nuxt.hook("app:resolve", (app) => {
    app.plugins.push({ src: resolve(nitroContext._internal.runtimeDir, "app/nitro.client.mjs") });
  });
  nuxt.options.env.NITRO_PRESET = nitroContext.preset;
  nuxt.hook("modules:done", async () => {
    await nuxt.callHook("nitro:context", nitroContext);
    await nuxt.callHook("nitro:context", nitroDevContext);
    const { middleware, legacyMiddleware } = await resolveMiddleware(nuxt);
    nuxt.server.setLegacyMiddleware(legacyMiddleware);
    nitroContext.middleware.push(...middleware);
    nitroDevContext.middleware.push(...middleware);
  });
  nuxt.hook("build:done", async () => {
    if (nuxt.options.dev) {
      await build(nitroDevContext);
    } else if (!nitroContext._nuxt.isStatic) {
      await prepare(nitroContext);
      await generate(nitroContext);
      await build(nitroContext);
    }
  });
  nuxt.hook("build:before", async () => {
    const serverDirs = nitroDevContext._layers.map((layer) => layer.serverDir);
    nitroDevContext.scannedMiddleware = (await Promise.all(serverDirs.map(async (dir) => await scanMiddleware(dir)))).flat().sort((a, b) => b.route.localeCompare(a.route));
    await writeTypes(nitroDevContext);
  });
  if (nuxt.options.dev) {
    nitroDevContext._internal.hooks.hook("nitro:compiled", () => {
      nuxt.server.watch();
    });
    nuxt.hook("build:compile", ({ compiler }) => {
      compiler.outputFileSystem = wpfs;
    });
    nuxt.hook("server:devMiddleware", (m) => {
      nuxt.server.setDevMiddleware(m);
    });
  }
}

export { initNitro };
