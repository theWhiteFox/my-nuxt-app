import minimist from 'minimist';
import { red, dim } from 'kolorist';
import { createServer } from 'vite';
import { ViteNodeServer } from './server.js';
import { ViteNodeRunner } from './client.js';
import 'pathe';
import 'fs';
import 'mlly';
import './utils.js';
import 'url';
import 'module';
import 'vm';

const argv = minimist(process.argv.slice(2), {
  "alias": {
    r: "root",
    c: "config",
    h: "help",
    w: "watch",
    s: "silent"
  },
  "--": true,
  "string": ["root", "config"],
  "boolean": ["help", "watch", "silent"],
  unknown(name) {
    if (name[0] === "-") {
      console.error(red(`Unknown argument: ${name}`));
      help();
      process.exit(1);
    }
    return true;
  }
});
if (argv.help) {
  help();
  process.exit(0);
}
if (!argv._.length) {
  console.error(red("No files specified."));
  help();
  process.exit(1);
}
process.argv = [...process.argv.slice(0, 2), ...argv["--"] || []];
run(argv);
function help() {
  console.log(`
Usage:
  $ vite-node [options] [files]

Options:
  -r, --root <path>      ${dim("[string]")} use specified root directory
  -c, --config <file>    ${dim("[string]")} use specified config file
  -w, --watch           ${dim("[boolean]")} restart on file changes, similar to "nodemon"
  -s, --silent          ${dim("[boolean]")} do not emit errors and logs
  --vue                 ${dim("[boolean]")} support for importing Vue component
`);
}
async function run(options = {}) {
  const files = options.files || options._ || [];
  const server = await createServer({
    logLevel: "error",
    clearScreen: false,
    configFile: options.config,
    root: options.root
  });
  await server.pluginContainer.buildStart({});
  const node = new ViteNodeServer(server);
  const runner = new ViteNodeRunner({
    root: server.config.root,
    base: server.config.base,
    fetchModule(id) {
      return node.fetchModule(id);
    },
    resolveId(id, importer) {
      return node.resolveId(id, importer);
    }
  });
  await runner.executeId("/@vite/env");
  for (const file of files)
    await runner.executeFile(file);
  if (!options.watch)
    await server.close();
  server.watcher.on("change", async (eventName, path) => {
    console.log(dim(`[${eventName}] ${path}`));
    Array.from(runner.moduleCache.keys()).forEach((i) => {
      if (!i.includes("node_modules"))
        runner.moduleCache.delete(i);
    });
    for (const file of files)
      await runner.executeFile(file);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlcyI6WyIuLi9zcmMvY2xpLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtaW5pbWlzdCBmcm9tICdtaW5pbWlzdCdcbmltcG9ydCB7IGRpbSwgcmVkIH0gZnJvbSAna29sb3Jpc3QnXG5pbXBvcnQgeyBjcmVhdGVTZXJ2ZXIgfSBmcm9tICd2aXRlJ1xuaW1wb3J0IHsgVml0ZU5vZGVTZXJ2ZXIgfSBmcm9tICcuL3NlcnZlcidcbmltcG9ydCB7IFZpdGVOb2RlUnVubmVyIH0gZnJvbSAnLi9jbGllbnQnXG5cbmNvbnN0IGFyZ3YgPSBtaW5pbWlzdChwcm9jZXNzLmFyZ3Yuc2xpY2UoMiksIHtcbiAgJ2FsaWFzJzoge1xuICAgIHI6ICdyb290JyxcbiAgICBjOiAnY29uZmlnJyxcbiAgICBoOiAnaGVscCcsXG4gICAgdzogJ3dhdGNoJyxcbiAgICBzOiAnc2lsZW50JyxcbiAgfSxcbiAgJy0tJzogdHJ1ZSxcbiAgJ3N0cmluZyc6IFsncm9vdCcsICdjb25maWcnXSxcbiAgJ2Jvb2xlYW4nOiBbJ2hlbHAnLCAnd2F0Y2gnLCAnc2lsZW50J10sXG4gIHVua25vd24obmFtZTogc3RyaW5nKSB7XG4gICAgaWYgKG5hbWVbMF0gPT09ICctJykge1xuICAgICAgY29uc29sZS5lcnJvcihyZWQoYFVua25vd24gYXJndW1lbnQ6ICR7bmFtZX1gKSlcbiAgICAgIGhlbHAoKVxuICAgICAgcHJvY2Vzcy5leGl0KDEpXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH0sXG59KVxuXG5pZiAoYXJndi5oZWxwKSB7XG4gIGhlbHAoKVxuICBwcm9jZXNzLmV4aXQoMClcbn1cblxuaWYgKCFhcmd2Ll8ubGVuZ3RoKSB7XG4gIGNvbnNvbGUuZXJyb3IocmVkKCdObyBmaWxlcyBzcGVjaWZpZWQuJykpXG4gIGhlbHAoKVxuICBwcm9jZXNzLmV4aXQoMSlcbn1cblxuLy8gZm9yd2FyZCBhcmd2XG5wcm9jZXNzLmFyZ3YgPSBbLi4ucHJvY2Vzcy5hcmd2LnNsaWNlKDAsIDIpLCAuLi4oYXJndlsnLS0nXSB8fCBbXSldXG5cbnJ1bihhcmd2KVxuXG5mdW5jdGlvbiBoZWxwKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBjb25zb2xlLmxvZyhgXG5Vc2FnZTpcbiAgJCB2aXRlLW5vZGUgW29wdGlvbnNdIFtmaWxlc11cblxuT3B0aW9uczpcbiAgLXIsIC0tcm9vdCA8cGF0aD4gICAgICAke2RpbSgnW3N0cmluZ10nKX0gdXNlIHNwZWNpZmllZCByb290IGRpcmVjdG9yeVxuICAtYywgLS1jb25maWcgPGZpbGU+ICAgICR7ZGltKCdbc3RyaW5nXScpfSB1c2Ugc3BlY2lmaWVkIGNvbmZpZyBmaWxlXG4gIC13LCAtLXdhdGNoICAgICAgICAgICAke2RpbSgnW2Jvb2xlYW5dJyl9IHJlc3RhcnQgb24gZmlsZSBjaGFuZ2VzLCBzaW1pbGFyIHRvIFwibm9kZW1vblwiXG4gIC1zLCAtLXNpbGVudCAgICAgICAgICAke2RpbSgnW2Jvb2xlYW5dJyl9IGRvIG5vdCBlbWl0IGVycm9ycyBhbmQgbG9nc1xuICAtLXZ1ZSAgICAgICAgICAgICAgICAgJHtkaW0oJ1tib29sZWFuXScpfSBzdXBwb3J0IGZvciBpbXBvcnRpbmcgVnVlIGNvbXBvbmVudFxuYClcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDbGlPcHRpb25zIHtcbiAgZmlsZXM/OiBzdHJpbmdbXVxuICBfPzogc3RyaW5nW11cbiAgcm9vdD86IHN0cmluZ1xuICBjb25maWc/OiBzdHJpbmdcbiAgd2F0Y2g/OiBib29sZWFuXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bihvcHRpb25zOiBDbGlPcHRpb25zID0ge30pIHtcbiAgY29uc3QgZmlsZXMgPSBvcHRpb25zLmZpbGVzIHx8IG9wdGlvbnMuXyB8fCBbXVxuICBjb25zdCBzZXJ2ZXIgPSBhd2FpdCBjcmVhdGVTZXJ2ZXIoe1xuICAgIGxvZ0xldmVsOiAnZXJyb3InLFxuICAgIGNsZWFyU2NyZWVuOiBmYWxzZSxcbiAgICBjb25maWdGaWxlOiBvcHRpb25zLmNvbmZpZyxcbiAgICByb290OiBvcHRpb25zLnJvb3QsXG4gIH0pXG4gIGF3YWl0IHNlcnZlci5wbHVnaW5Db250YWluZXIuYnVpbGRTdGFydCh7fSlcblxuICBjb25zdCBub2RlID0gbmV3IFZpdGVOb2RlU2VydmVyKHNlcnZlcilcblxuICBjb25zdCBydW5uZXIgPSBuZXcgVml0ZU5vZGVSdW5uZXIoe1xuICAgIHJvb3Q6IHNlcnZlci5jb25maWcucm9vdCxcbiAgICBiYXNlOiBzZXJ2ZXIuY29uZmlnLmJhc2UsXG4gICAgZmV0Y2hNb2R1bGUoaWQpIHtcbiAgICAgIHJldHVybiBub2RlLmZldGNoTW9kdWxlKGlkKVxuICAgIH0sXG4gICAgcmVzb2x2ZUlkKGlkLCBpbXBvcnRlcikge1xuICAgICAgcmV0dXJuIG5vZGUucmVzb2x2ZUlkKGlkLCBpbXBvcnRlcilcbiAgICB9LFxuICB9KVxuXG4gIC8vIHByb3ZpZGUgdGhlIHZpdGUgZGVmaW5lIHZhcmlhYmxlIGluIHRoaXMgY29udGV4dFxuICBhd2FpdCBydW5uZXIuZXhlY3V0ZUlkKCcvQHZpdGUvZW52JylcblxuICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpXG4gICAgYXdhaXQgcnVubmVyLmV4ZWN1dGVGaWxlKGZpbGUpXG5cbiAgaWYgKCFvcHRpb25zLndhdGNoKVxuICAgIGF3YWl0IHNlcnZlci5jbG9zZSgpXG5cbiAgc2VydmVyLndhdGNoZXIub24oJ2NoYW5nZScsIGFzeW5jKGV2ZW50TmFtZSwgcGF0aCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coZGltKGBbJHtldmVudE5hbWV9XSAke3BhdGh9YCkpXG5cbiAgICAvLyBpbnZhbGlkYXRlIG1vZHVsZSBjYWNoZSBidXQgbm90IG5vZGVfbW9kdWxlc1xuICAgIEFycmF5LmZyb20ocnVubmVyLm1vZHVsZUNhY2hlLmtleXMoKSlcbiAgICAgIC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICAgIGlmICghaS5pbmNsdWRlcygnbm9kZV9tb2R1bGVzJykpXG4gICAgICAgICAgcnVubmVyLm1vZHVsZUNhY2hlLmRlbGV0ZShpKVxuICAgICAgfSlcblxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcylcbiAgICAgIGF3YWl0IHJ1bm5lci5leGVjdXRlRmlsZShmaWxlKVxuICB9KVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFLQSxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDN0MsRUFBRSxPQUFPLEVBQUU7QUFDWCxJQUFJLENBQUMsRUFBRSxNQUFNO0FBQ2IsSUFBSSxDQUFDLEVBQUUsUUFBUTtBQUNmLElBQUksQ0FBQyxFQUFFLE1BQU07QUFDYixJQUFJLENBQUMsRUFBRSxPQUFPO0FBQ2QsSUFBSSxDQUFDLEVBQUUsUUFBUTtBQUNmLEdBQUc7QUFDSCxFQUFFLElBQUksRUFBRSxJQUFJO0FBQ1osRUFBRSxRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDO0FBQzlCLEVBQUUsU0FBUyxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUM7QUFDeEMsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFO0FBQ2hCLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO0FBQ3pCLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RCxNQUFNLElBQUksRUFBRSxDQUFDO0FBQ2IsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLEdBQUc7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUNILElBQUksSUFBSSxDQUFDLElB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
