'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var url = require('url');
var pathe = require('pathe');

const isWindows = process.platform === "win32";
function slash(str) {
  return str.replace(/\\/g, "/");
}
function normalizeRequestId(id, base) {
  if (base && id.startsWith(base))
    id = `/${id.slice(base.length)}`;
  return id.replace(/^\/@id\/__x00__/, "\0").replace(/^\/@id\//, "").replace(/^__vite-browser-external:/, "").replace(/^(node|file):/, "").replace(/^\/+/, "/").replace(/\?v=\w+/, "?").replace(/&v=\w+/, "").replace(/\?import/, "?").replace(/&import/, "").replace(/\?+$/, "");
}
function normalizeModuleId(id) {
  return id.replace(/\\/g, "/").replace(/^\/@fs\//, "/").replace(/^file:\//, "/").replace(/^\/+/, "/");
}
function isPrimitive(v) {
  return v !== Object(v);
}
function toFilePath(id, root) {
  let absolute = slash(id).startsWith("/@fs/") ? id.slice(4) : id.startsWith(pathe.dirname(root)) && pathe.dirname(root) !== "/" ? id : id.startsWith("/") ? slash(pathe.resolve(root, id.slice(1))) : id;
  if (absolute.startsWith("//"))
    absolute = absolute.slice(1);
  return isWindows && absolute.startsWith("/") ? url.fileURLToPath(url.pathToFileURL(absolute.slice(1)).href) : absolute;
}
let SOURCEMAPPING_URL = "sourceMa";
SOURCEMAPPING_URL += "ppingURL";
async function withInlineSourcemap(result) {
  const { code, map } = result;
  if (code.includes(`${SOURCEMAPPING_URL}=`))
    return result;
  if (map)
    result.code = `${code}

//# ${SOURCEMAPPING_URL}=data:application/json;charset=utf-8;base64,${Buffer.from(JSON.stringify(map), "utf-8").toString("base64")}
`;
  return result;
}

exports.isPrimitive = isPrimitive;
exports.isWindows = isWindows;
exports.normalizeModuleId = normalizeModuleId;
exports.normalizeRequestId = normalizeRequestId;
exports.slash = slash;
exports.toFilePath = toFilePath;
exports.withInlineSourcemap = withInlineSourcemap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuY2pzIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCwgcGF0aFRvRmlsZVVSTCB9IGZyb20gJ3VybCdcbmltcG9ydCB7IGRpcm5hbWUsIHJlc29sdmUgfSBmcm9tICdwYXRoZSdcbmltcG9ydCB0eXBlIHsgVHJhbnNmb3JtUmVzdWx0IH0gZnJvbSAndml0ZSdcblxuZXhwb3J0IGNvbnN0IGlzV2luZG93cyA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMidcblxuZXhwb3J0IGZ1bmN0aW9uIHNsYXNoKHN0cjogc3RyaW5nKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxcXC9nLCAnLycpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVSZXF1ZXN0SWQoaWQ6IHN0cmluZywgYmFzZT86IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChiYXNlICYmIGlkLnN0YXJ0c1dpdGgoYmFzZSkpXG4gICAgaWQgPSBgLyR7aWQuc2xpY2UoYmFzZS5sZW5ndGgpfWBcblxuICByZXR1cm4gaWRcbiAgICAucmVwbGFjZSgvXlxcL0BpZFxcL19feDAwX18vLCAnXFwwJykgLy8gdmlydHVhbCBtb2R1bGVzIHN0YXJ0IHdpdGggYFxcMGBcbiAgICAucmVwbGFjZSgvXlxcL0BpZFxcLy8sICcnKVxuICAgIC5yZXBsYWNlKC9eX192aXRlLWJyb3dzZXItZXh0ZXJuYWw6LywgJycpXG4gICAgLnJlcGxhY2UoL14obm9kZXxmaWxlKTovLCAnJylcbiAgICAucmVwbGFjZSgvXlxcLysvLCAnLycpIC8vIHJlbW92ZSBkdXBsaWNhdGUgbGVhZGluZyBzbGFzaGVzXG4gICAgLnJlcGxhY2UoL1xcP3Y9XFx3Ky8sICc/JykgLy8gcmVtb3ZlID92PSBxdWVyeVxuICAgIC5yZXBsYWNlKC8mdj1cXHcrLywgJycpIC8vIHJlbW92ZSAmdj0gcXVlcnlcbiAgICAucmVwbGFjZSgvXFw/aW1wb3J0LywgJz8nKSAvLyByZW1vdmUgP2ltcG9ydCBxdWVyeVxuICAgIC5yZXBsYWNlKC8maW1wb3J0LywgJycpIC8vIHJlbW92ZSAmaW1wb3J0IHF1ZXJ5XG4gICAgLnJlcGxhY2UoL1xcPyskLywgJycpIC8vIHJlbW92ZSBlbmQgcXVlcnkgbWFya1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplTW9kdWxlSWQoaWQ6IHN0cmluZykge1xuICByZXR1cm4gaWRcbiAgICAucmVwbGFjZSgvXFxcXC9nLCAnLycpXG4gICAgLnJlcGxhY2UoL15cXC9AZnNcXC8vLCAnLycpXG4gICAgLnJlcGxhY2UoL15maWxlOlxcLy8sICcvJylcbiAgICAucmVwbGFjZSgvXlxcLysvLCAnLycpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2OiBhbnkpIHtcbiAgcmV0dXJuIHYgIT09IE9iamVjdCh2KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9GaWxlUGF0aChpZDogc3RyaW5nLCByb290OiBzdHJpbmcpOiBzdHJpbmcge1xuICBsZXQgYWJzb2x1dGUgPSBzbGFzaChpZCkuc3RhcnRzV2l0aCgnL0Bmcy8nKVxuICAgID8gaWQuc2xpY2UoNClcbiAgICA6IGlkLnN0YXJ0c1dpdGgoZGlybmFtZShyb290KSkgJiYgZGlybmFtZShyb290KSAhPT0gJy8nXG4gICAgICA/IGlkXG4gICAgICA6IGlkLnN0YXJ0c1dpdGgoJy8nKVxuICAgICAgICA/IHNsYXNoKHJlc29sdmUocm9vdCwgaWQuc2xpY2UoMSkpKVxuICAgICAgICA6IGlkXG5cbiAgaWYgKGFic29sdXRlLnN0YXJ0c1dpdGgoJy8vJykpXG4gICAgYWJzb2x1dGUgPSBhYnNvbHV0ZS5zbGljZSgxKVxuXG4gIC8vIGRpc2FtYmlndWF0ZSB0aGUgYDxVTklUPjovYCBvbiB3aW5kb3dzOiBzZWUgbm9kZWpzL25vZGUjMzE3MTBcbiAgcmV0dXJuIGlzV2luZG93cyAmJiBhYnNvbHV0ZS5zdGFydHNXaXRoKCcvJylcbiAgICA/IGZpbGVVUkxUb1BhdGgocGF0aFRvRmlsZVVSTChhYnNvbHV0ZS5zbGljZSgxKSkuaHJlZilcbiAgICA6IGFic29sdXRlXG59XG5cbmxldCBTT1VSQ0VNQVBQSU5HX1VSTCA9ICdzb3VyY2VNYSdcblNPVVJDRU1BUFBJTkdfVVJMICs9ICdwcGluZ1VSTCdcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdpdGhJbmxpbmVTb3VyY2VtYXAocmVzdWx0OiBUcmFuc2Zvcm1SZXN1bHQpIHtcbiAgY29uc3QgeyBjb2RlLCBtYXAgfSA9IHJlc3VsdFxuXG4gIGlmIChjb2RlLmluY2x1ZGVzKGAke1NPVVJDRU1BUFBJTkdfVVJMfT1gKSlcbiAgICByZXR1cm4gcmVzdWx0XG4gIGlmIChtYXApXG4gICAgcmVzdWx0LmNvZGUgPSBgJHtjb2RlfVxcblxcbi8vIyAke1NPVVJDRU1BUFBJTkdfVVJMfT1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJHtCdWZmZXIuZnJvbShKU09OLnN0cmluZ2lmeShtYXApLCAndXRmLTgnKS50b1N0cmluZygnYmFzZTY0Jyl9XFxuYFxuXG4gIHJldHVybiByZXN1bHRcbn1cbiJdLCJuYW1lcyI6WyJkaXJuYW1lIiwicmVzb2x2ZSIsImZpbGVVUkxUb1BhdGgiLCJwYXRoVG9GaWxlVVJMIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSWEsTUFBQSxTQUFBLEdBQVksUUFBUSxRQUFhLEtBQUEsUUFBQTtBQUV2QyxTQUFBLEtBQUEsQ0FBZSxHQUFhLEVBQUE7QUFDakMsRUFBTyxPQUFBLEdBQUEsQ0FBSSxPQUFRLENBQUEsS0FBQSxFQUFPLEdBQUcsQ0FBQSxDQUFBO0FBQy9CLENBQUE7QUFFTyxTQUFBLGtCQUFBLENBQTRCLElBQVksSUFBdUIsRUFBQTtBQUNwRSxFQUFJLElBQUEsSUFBQSxJQUFRLEVBQUcsQ0FBQSxVQUFBLENBQVcsSUFBSSxDQUFBO0FBQzVCLElBQUEsRUFBQSxHQUFLLENBQUksQ0FBQSxFQUFBLEVBQUEsQ0FBRyxLQUFNLENBQUEsSUFBQSxDQUFLLE1BQU0sQ0FB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
