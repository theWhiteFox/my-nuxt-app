'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var module$1 = require('module');
var url = require('url');
var vm = require('vm');
var pathe = require('pathe');
var mlly = require('mlly');
var utils = require('./utils.cjs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var vm__default = /*#__PURE__*/_interopDefaultLegacy(vm);

const DEFAULT_REQUEST_STUBS = {
  "/@vite/client": {
    injectQuery: (id) => id,
    createHotContext() {
      return {
        accept: () => {
        },
        prune: () => {
        },
        dispose: () => {
        },
        decline: () => {
        },
        invalidate: () => {
        },
        on: () => {
        }
      };
    },
    updateStyle() {
    }
  }
};
class ModuleCacheMap extends Map {
  normalizePath(fsPath) {
    return utils.normalizeModuleId(fsPath);
  }
  set(fsPath, mod) {
    fsPath = this.normalizePath(fsPath);
    if (!super.has(fsPath))
      super.set(fsPath, mod);
    else
      Object.assign(super.get(fsPath), mod);
    return this;
  }
  get(fsPath) {
    fsPath = this.normalizePath(fsPath);
    return super.get(fsPath);
  }
  delete(fsPath) {
    fsPath = this.normalizePath(fsPath);
    return super.delete(fsPath);
  }
}
class ViteNodeRunner {
  constructor(options) {
    this.options = options;
    this.root = options.root ?? process.cwd();
    this.moduleCache = options.moduleCache ?? new ModuleCacheMap();
    this.debug = options.debug ?? (typeof process !== "undefined" ? !!process.env.VITE_NODE_DEBUG : false);
  }
  async executeFile(file) {
    return await this.cachedRequest(`/@fs/${utils.slash(pathe.resolve(file))}`, []);
  }
  async executeId(id) {
    return await this.cachedRequest(id, []);
  }
  async cachedRequest(rawId, callstack) {
    var _a, _b;
    const id = utils.normalizeRequestId(rawId, this.options.base);
    const fsPath = utils.toFilePath(id, this.root);
    if ((_a = this.moduleCache.get(fsPath)) == null ? void 0 : _a.promise)
      return (_b = this.moduleCache.get(fsPath)) == null ? void 0 : _b.promise;
    const promise = this.directRequest(id, fsPath, callstack);
    this.moduleCache.set(fsPath, { promise });
    return await promise;
  }
  async directRequest(id, fsPath, _callstack) {
    const callstack = [..._callstack, utils.normalizeModuleId(id)];
    const request = async (dep) => {
      var _a, _b;
      const getStack = () => {
        return `stack:
${[...callstack, dep].reverse().map((p) => `- ${p}`).join("\n")}`;
      };
      if (this.options.resolveId && this.shouldResolveId(dep)) {
        const resolvedDep = await this.options.resolveId(dep, id);
        dep = ((_a = resolvedDep == null ? void 0 : resolvedDep.id) == null ? void 0 : _a.replace(this.root, "")) || dep;
      }
      let debugTimer;
      if (this.debug)
        debugTimer = setTimeout(() => this.debugLog(() => `module ${dep} takes over 2s to load.
${getStack()}`), 2e3);
      try {
        if (callstack.includes(utils.normalizeModuleId(dep))) {
          this.debugLog(() => `circular dependency, ${getStack()}`);
          const depExports = (_b = this.moduleCache.get(dep)) == null ? void 0 : _b.exports;
          if (depExports)
            return depExports;
          throw new Error(`[vite-node] Failed to resolve circular dependency, ${getStack()}`);
        }
        const mod = await this.cachedRequest(dep, callstack);
        return mod;
      } finally {
        if (debugTimer)
          clearTimeout(debugTimer);
      }
    };
    const requestStubs = this.options.requestStubs || DEFAULT_REQUEST_STUBS;
    if (id in requestStubs)
      return requestStubs[id];
    const { code: transformed, externalize } = await this.options.fetchModule(id);
    if (externalize) {
      const mod = await this.interopedImport(externalize);
      this.moduleCache.set(fsPath, { exports: mod });
      return mod;
    }
    if (transformed == null)
      throw new Error(`[vite-node] Failed to load ${id}`);
    const url$1 = url.pathToFileURL(fsPath).href;
    const exports = /* @__PURE__ */ Object.create(null);
    exports[Symbol.toStringTag] = "Module";
    this.moduleCache.set(id, { code: transformed, exports });
    const __filename = url.fileURLToPath(url$1);
    const moduleProxy = {
      set exports(value) {
        exportAll(exports, value);
        exports.default = value;
      },
      get exports() {
        return exports.default;
      }
    };
    const context = this.prepareContext({
      __vite_ssr_import__: request,
      __vite_ssr_dynamic_import__: request,
      __vite_ssr_exports__: exports,
      __vite_ssr_exportAll__: (obj) => exportAll(exports, obj),
      __vite_ssr_import_meta__: { url: url$1 },
      require: module$1.createRequire(url$1),
      exports,
      module: moduleProxy,
      __filename,
      __dirname: pathe.dirname(__filename)
    });
    const fn = vm__default["default"].runInThisContext(`'use strict';async (${Object.keys(context).join(",")})=>{{${transformed}
}}`, {
      filename: fsPath,
      lineOffset: 0
    });
    await fn(...Object.values(context));
    return exports;
  }
  prepareContext(context) {
    return context;
  }
  shouldResolveId(dep) {
    if (mlly.isNodeBuiltin(dep) || dep in (this.options.requestStubs || DEFAULT_REQUEST_STUBS))
      return false;
    return !pathe.isAbsolute(dep) || !pathe.extname(dep);
  }
  shouldInterop(path, mod) {
    if (this.options.interopDefault === false)
      return false;
    return !path.endsWith(".mjs") && "default" in mod;
  }
  async interopedImport(path) {
    const mod = await (function (t) { return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require(t)); }); })(path);
    if (this.shouldInterop(path, mod)) {
      const tryDefault = this.hasNestedDefault(mod);
      return new Proxy(mod, {
        get: proxyMethod("get", tryDefault),
        set: proxyMethod("set", tryDefault),
        has: proxyMethod("has", tryDefault),
        deleteProperty: proxyMethod("deleteProperty", tryDefault)
      });
    }
    return mod;
  }
  hasNestedDefault(target) {
    return "__esModule" in target && target.__esModule && "default" in target.default;
  }
  debugLog(msg) {
    if (this.debug)
      console.log(`[vite-node] ${msg()}`);
  }
}
function proxyMethod(name, tryDefault) {
  return function(target, key, ...args) {
    const result = Reflect[name](target, key, ...args);
    if (utils.isPrimitive(target.default))
      return result;
    if (tryDefault && key === "default" || typeof result === "undefined")
      return Reflect[name](target.default, key, ...args);
    return result;
  };
}
function exportAll(exports, sourceModule) {
  for (const key in sourceModule) {
    if (key !== "default") {
      try {
        Object.defineProperty(exports, key, {
          enumerable: true,
          configurable: true,
          get() {
            return sourceModule[key];
          }
        });
      } catch (_err) {
      }
    }
  }
}

exports.DEFAULT_REQUEST_STUBS = DEFAULT_REQUEST_STUBS;
exports.ModuleCacheMap = ModuleCacheMap;
exports.ViteNodeRunner = ViteNodeRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmNqcyIsInNvdXJjZXMiOlsiLi4vc3JjL2NsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVSZXF1aXJlIH0gZnJvbSAnbW9kdWxlJ1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCwgcGF0aFRvRmlsZVVSTCB9IGZyb20gJ3VybCdcbmltcG9ydCB2bSBmcm9tICd2bSdcbmltcG9ydCB7IGRpcm5hbWUsIGV4dG5hbWUsIGlzQWJzb2x1dGUsIHJlc29sdmUgfSBmcm9tICdwYXRoZSdcbmltcG9ydCB7IGlzTm9kZUJ1aWx0aW4gfSBmcm9tICdtbGx5J1xuaW1wb3J0IHsgaXNQcmltaXRpdmUsIG5vcm1hbGl6ZU1vZHVsZUlkLCBub3JtYWxpemVSZXF1ZXN0SWQsIHNsYXNoLCB0b0ZpbGVQYXRoIH0gZnJvbSAnLi91dGlscydcbmltcG9ydCB0eXBlIHsgTW9kdWxlQ2FjaGUsIFZpdGVOb2RlUnVubmVyT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1JFUVVFU1RfU1RVQlMgPSB7XG4gICcvQHZpdGUvY2xpZW50Jzoge1xuICAgIGluamVjdFF1ZXJ5OiAoaWQ6IHN0cmluZykgPT4gaWQsXG4gICAgY3JlYXRlSG90Q29udGV4dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFjY2VwdDogKCkgPT4ge30sXG4gICAgICAgIHBydW5lOiAoKSA9PiB7fSxcbiAgICAgICAgZGlzcG9zZTogKCkgPT4ge30sXG4gICAgICAgIGRlY2xpbmU6ICgpID0+IHt9LFxuICAgICAgICBpbnZhbGlkYXRlOiAoKSA9PiB7fSxcbiAgICAgICAgb246ICgpID0+IHt9LFxuICAgICAgfVxuICAgIH0sXG4gICAgdXBkYXRlU3R5bGUoKSB7fSxcbiAgfSxcbn1cblxuZXhwb3J0IGNsYXNzIE1vZHVsZUNhY2hlTWFwIGV4dGVuZHMgTWFwPHN0cmluZywgTW9kdWxlQ2FjaGU+IHtcbiAgbm9ybWFsaXplUGF0aChmc1BhdGg6IHN0cmluZykge1xuICAgIHJldHVybiBub3JtYWxpemVNb2R1bGVJZChmc1BhdGgpXG4gIH1cblxuICBzZXQoZnNQYXRoOiBzdHJpbmcsIG1vZDogUGFydGlhbDxNb2R1bGVDYWNoZT4pIHtcbiAgICBmc1BhdGggPSB0aGlzLm5vcm1hbGl6ZVBhdGgoZnNQYXRoKVxuICAgIGlmICghc3VwZXIuaGFzKGZzUGF0aCkpXG4gICAgICBzdXBlci5zZXQoZnNQYXRoLCBtb2QpXG4gICAgZWxzZVxuICAgICAgT2JqZWN0LmFzc2lnbihzdXBlci5nZXQoZnNQYXRoKSwgbW9kKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBnZXQoZnNQYXRoOiBzdHJpbmcpIHtcbiAgICBmc1BhdGggPSB0aGlzLm5vcm1hbGl6ZVBhdGgoZnNQYXRoKVxuICAgIHJldHVybiBzdXBlci5nZXQoZnNQYXRoKVxuICB9XG5cbiAgZGVsZXRlKGZzUGF0aDogc3RyaW5nKSB7XG4gICAgZnNQYXRoID0gdGhpcy5ub3JtYWxpemVQYXRoKGZzUGF0aClcbiAgICByZXR1cm4gc3VwZXIuZGVsZXRlKGZzUGF0aClcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVml0ZU5vZGVSdW5uZXIge1xuICByb290OiBzdHJpbmdcblxuICBkZWJ1ZzogYm9vbGVhblxuXG4gIC8qKlxuICAgKiBIb2xkcyB0aGUgY2FjaGUgb2YgbW9kdWxlc1xuICAgKiBLZXlzIG9mIHRoZSBtYXAgYXJlIGZpbGVwYXRocywgb3IgcGxhaW4gcGFja2FnZSBuYW1lc1xuICAgKi9cbiAgbW9kdWxlQ2FjaGU6IE1vZHVsZUNhY2hlTWFwXG5cbiAgY29uc3RydWN0b3IocHVibGljIG9wdGlvbnM6IFZpdGVOb2RlUnVubmVyT3B0aW9ucykge1xuICAgIHRoaXMucm9vdCA9IG9wdGlvbnMucm9vdCA/PyBwcm9jZXNzLmN3ZCgpXG4gICAgdGhpcy5tb2R1bGVDYWNoZSA9IG9wdGlvbnMubW9kdWxlQ2FjaGUgPz8gbmV3IE1vZHVsZUNhY2hlTWFwKClcbiAgICB0aGlzLmRlYnVnID0gb3B0aW9ucy5kZWJ1ZyA/PyAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnID8gISFwcm9jZXNzLmVudi5WSVRFX05PREVfREVCVUcgOiBmYWxzZSlcbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGVGaWxlKGZpbGU6IHN0cmluZykge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNhY2hlZFJlcXVlc3QoYC9AZnMvJHtzbGFzaChyZXNvbHZlKGZpbGUpKX1gLCBbXSlcbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGVJZChpZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2FjaGVkUmVxdWVzdChpZCwgW10pXG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIGFzeW5jIGNhY2hlZFJlcXVlc3QocmF3SWQ6IHN0cmluZywgY2FsbHN0YWNrOiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IGlkID0gbm9ybWFsaXplUmVxdWVzdElkKHJhd0lkLCB0aGlzLm9wdGlvbnMuYmFzZSlcbiAgICBjb25zdCBmc1BhdGggPSB0b0ZpbGVQYXRoKGlkLCB0aGlzLnJvb3QpXG5cbiAgICBpZiAodGhpcy5tb2R1bGVDYWNoZS5nZXQoZnNQYXRoKT8ucHJvbWlzZSlcbiAgICAgIHJldHVybiB0aGlzLm1vZHVsZUNhY2hlLmdldChmc1BhdGgpPy5wcm9taXNlXG5cbiAgICBjb25zdCBwcm9taXNlID0gdGhpcy5kaXJlY3RSZXF1ZXN0KGlkLCBmc1BhdGgsIGNhbGxzdGFjaylcbiAgICB0aGlzLm1vZHVsZUNhY2hlLnNldChmc1BhdGgsIHsgcHJvbWlzZSB9KVxuXG4gICAgcmV0dXJuIGF3YWl0IHByb21pc2VcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgYXN5bmMgZGlyZWN0UmVxdWVzdChpZDogc3RyaW5nLCBmc1BhdGg6IHN0cmluZywgX2NhbGxzdGFjazogc3RyaW5nW10pIHtcbiAgICBjb25zdCBjYWxsc3RhY2sgPSBbLi4uX2NhbGxzdGFjaywgbm9ybWFsaXplTW9kdWxlSWQoaWQpXVxuICAgIGNvbnN0IHJlcXVlc3QgPSBhc3luYyhkZXA6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgZ2V0U3RhY2sgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBgc3RhY2s6XFxuJHtbLi4uY2FsbHN0YWNrLCBkZXBdLnJldmVyc2UoKS5tYXAocCA9PiBgLSAke3B9YCkuam9pbignXFxuJyl9YFxuICAgICAgfVxuXG4gICAgICAvLyBwcm9iYWJseSBtZWFucyBpdCB3YXMgcGFzc2VkIGFzIHZhcmlhYmxlXG4gICAgICAvLyBhbmQgd2Fzbid0IHRyYW5zZm9ybWVkIGJ5IFZpdGVcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVzb2x2ZUlkICYmIHRoaXMuc2hvdWxkUmVzb2x2ZUlkKGRlcCkpIHtcbiAgICAgICAgY29uc3QgcmVzb2x2ZWREZXAgPSBhd2FpdCB0aGlzLm9wdGlvbnMucmVzb2x2ZUlkKGRlcCwgaWQpXG4gICAgICAgIGRlcCA9IHJlc29sdmVkRGVwPy5pZD8ucmVwbGFjZSh0aGlzLnJvb3QsICcnKSB8fCBkZXBcbiAgICAgIH1cblxuICAgICAgbGV0IGRlYnVnVGltZXI6IGFueVxuICAgICAgaWYgKHRoaXMuZGVidWcpXG4gICAgICAgIGRlYnVnVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuZGVidWdMb2coKCkgPT4gYG1vZHVsZSAke2RlcH0gdGFrZXMgb3ZlciAycyB0byBsb2FkLlxcbiR7Z2V0U3RhY2soKX1gKSwgMjAwMClcblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGNhbGxzdGFjay5pbmNsdWRlcyhub3JtYWxpemVNb2R1bGVJZChkZXApKSkge1xuICAgICAgICAgIHRoaXMuZGVidWdMb2coKCkgPT4gYGNpcmN1bGFyIGRlcGVuZGVuY3ksICR7Z2V0U3RhY2soKX1gKVxuICAgICAgICAgIGNvbnN0IGRlcEV4cG9ydHMgPSB0aGlzLm1vZHVsZUNhY2hlLmdldChkZXApPy5leHBvcnRzXG4gICAgICAgICAgaWYgKGRlcEV4cG9ydHMpXG4gICAgICAgICAgICByZXR1cm4gZGVwRXhwb3J0c1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgW3ZpdGUtbm9kZV0gRmFpbGVkIHRvIHJlc29sdmUgY2lyY3VsYXIgZGVwZW5kZW5jeSwgJHtnZXRTdGFjaygpfWApXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtb2QgPSBhd2FpdCB0aGlzLmNhY2hlZFJlcXVlc3QoZGVwLCBjYWxsc3RhY2spXG5cbiAgICAgICAgcmV0dXJuIG1vZFxuICAgICAgfVxuICAgICAgZmluYWxseSB7XG4gICAgICAgIGlmIChkZWJ1Z1RpbWVyKVxuICAgICAgICAgIGNsZWFyVGltZW91dChkZWJ1Z1RpbWVyKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlcXVlc3RTdHVicyA9IHRoaXMub3B0aW9ucy5yZXF1ZXN0U3R1YnMgfHwgREVGQVVMVF9SRVFVRVNUX1NUVUJTXG4gICAgaWYgKGlkIGluIHJlcXVlc3RTdHVicylcbiAgICAgIHJldHVybiByZXF1ZXN0U3R1YnNbaWRdXG5cbiAgICBjb25zdCB7IGNvZGU6IHRyYW5zZm9ybWVkLCBleHRlcm5hbGl6ZSB9ID0gYXdhaXQgdGhpcy5vcHRpb25zLmZldGNoTW9kdWxlKGlkKVxuICAgIGlmIChleHRlcm5hbGl6ZSkge1xuICAgICAgY29uc3QgbW9kID0gYXdhaXQgdGhpcy5pbnRlcm9wZWRJbXBvcnQoZXh0ZXJuYWxpemUpXG4gICAgICB0aGlzLm1vZHVsZUNhY2hlLnNldChmc1BhdGgsIHsgZXhwb3J0czogbW9kIH0pXG4gICAgICByZXR1cm4gbW9kXG4gICAgfVxuXG4gICAgaWYgKHRyYW5zZm9ybWVkID09IG51bGwpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFt2aXRlLW5vZGVdIEZhaWxlZCB0byBsb2FkICR7aWR9YClcblxuICAgIC8vIGRpc2FtYmlndWF0ZSB0aGUgYDxVTklUPjovYCBvbiB3aW5kb3dzOiBzZWUgbm9kZWpzL25vZGUjMzE3MTBcbiAgICBjb25zdCB1cmwgPSBwYXRoVG9GaWxlVVJMKGZzUGF0aCkuaHJlZlxuICAgIGNvbnN0IGV4cG9ydHM6IGFueSA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgICBleHBvcnRzW1N5bWJvbC50b1N0cmluZ1RhZ10gPSAnTW9kdWxlJ1xuXG4gICAgdGhpcy5tb2R1bGVDYWNoZS5zZXQoaWQsIHsgY29kZTogdHJhbnNmb3JtZWQsIGV4cG9ydHMgfSlcblxuICAgIGNvbnN0IF9fZmlsZW5hbWUgPSBmaWxlVVJMVG9QYXRoKHVybClcbiAgICBjb25zdCBtb2R1bGVQcm94eSA9IHtcbiAgICAgIHNldCBleHBvcnRzKHZhbHVlKSB7XG4gICAgICAgIGV4cG9ydEFsbChleHBvcnRzLCB2YWx1ZSlcbiAgICAgICAgZXhwb3J0cy5kZWZhdWx0ID0gdmFsdWVcbiAgICAgIH0sXG4gICAgICBnZXQgZXhwb3J0cygpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuZGVmYXVsdFxuICAgICAgfSxcbiAgICB9XG5cbiAgICAvLyBCZSBjYXJlZnVsIHdoZW4gY2hhbmdpbmcgdGhpc1xuICAgIC8vIGNoYW5naW5nIGNvbnRleHQgd2lsbCBjaGFuZ2UgYW1vdW50IG9mIGNvZGUgYWRkZWQgb24gbGluZSA6MTE0ICh2bS5ydW5JblRoaXNDb250ZXh0KVxuICAgIC8vIHRoaXMgbWVzc2VzIHVwIHNvdXJjZW1hcHMgZm9yIGNvdmVyYWdlXG4gICAgLy8gYWRqdXN0IGBvZmZzZXRgIHZhcmlhYmxlIGluIHBhY2thZ2VzL3ZpdGVzdC9zcmMvaW50ZWdyYXRpb25zL2NvdmVyYWdlLnRzI0wxMDAgaWYgeW91IGRvIGNoYW5nZSB0aGlzXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMucHJlcGFyZUNvbnRleHQoe1xuICAgICAgLy8gZXNtIHRyYW5zZm9ybWVkIGJ5IFZpdGVcbiAgICAgIF9fdml0ZV9zc3JfaW1wb3J0X186IHJlcXVlc3QsXG4gICAgICBfX3ZpdGVfc3NyX2R5bmFtaWNfaW1wb3J0X186IHJlcXVlc3QsXG4gICAgICBfX3ZpdGVfc3NyX2V4cG9ydHNfXzogZXhwb3J0cyxcbiAgICAgIF9fdml0ZV9zc3JfZXhwb3J0QWxsX186IChvYmo6IGFueSkgPT4gZXhwb3J0QWxsKGV4cG9ydHMsIG9iaiksXG4gICAgICBfX3ZpdGVfc3NyX2ltcG9ydF9tZXRhX186IHsgdXJsIH0sXG5cbiAgICAgIC8vIGNqcyBjb21wYWN0XG4gICAgICByZXF1aXJlOiBjcmVhdGVSZXF1aXJlKHVybCksXG4gICAgICBleHBvcnRzLFxuICAgICAgbW9kdWxlOiBtb2R1bGVQcm94eSxcbiAgICAgIF9fZmlsZW5hbWUsXG4gICAgICBfX2Rpcm5hbWU6IGRpcm5hbWUoX19maWxlbmFtZSksXG4gICAgfSlcblxuICAgIC8vIGFkZCAndXNlIHN0cmljdCcgc2luY2UgRVNNIGVuYWJsZXMgaXQgYnkgZGVmYXVsdFxuICAgIGNvbnN0IGZuID0gdm0ucnVuSW5UaGlzQ29udGV4dChgJ3VzZSBzdHJpY3QnO2FzeW5jICgke09iamVjdC5rZXlzKGNvbnRleHQpLmpvaW4oJywnKX0pPT57eyR7dHJhbnNmb3JtZWR9XFxufX1gLCB7XG4gICAgICBmaWxlbmFtZTogZnNQYXRoLFxuICAgICAgbGluZU9mZnNldDogMCxcbiAgICB9KVxuXG4gICAgYXdhaXQgZm4oLi4uT2JqZWN0LnZhbHVlcyhjb250ZXh0KSlcblxuICAgIHJldHVybiBleHBvcnRzXG4gIH1cblxuICBwcmVwYXJlQ29udGV4dChjb250ZXh0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSB7XG4gICAgcmV0dXJuIGNvbnRleHRcbiAgfVxuXG4gIHNob3VsZFJlc29sdmVJZChkZXA6IHN0cmluZykge1xuICAgIGlmIChpc05vZGVCdWlsdGluKGRlcCkgfHwgZGVwIGluICh0aGlzLm9wdGlvbnMucmVxdWVzdFN0dWJzIHx8IERFRkFVTFRfUkVRVUVTVF9TVFVCUykpXG4gICAgICByZXR1cm4gZmFsc2VcblxuICAgIHJldHVybiAhaXNBYnNvbHV0ZShkZXApIHx8ICFleHRuYW1lKGRlcClcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgaWYgYSBtb2R1bGUgc2hvdWxkIGJlIGludGVyb3AtZWRcbiAgICogVGhpcyBmdW5jdGlvbiBtb3N0bHkgZm9yIHRoZSBhYmlsaXR5IHRvIG92ZXJyaWRlIGJ5IHN1YmNsYXNzXG4gICAqL1xuICBzaG91bGRJbnRlcm9wKHBhdGg6IHN0cmluZywgbW9kOiBhbnkpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmludGVyb3BEZWZhdWx0ID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIC8vIG5ldmVyIGludGVyb3AgRVNNIG1vZHVsZXNcbiAgICAvLyBUT0RPOiBzaG91bGQgYWxzbyBza2lwIGZvciBgLmpzYCB3aXRoIGB0eXBlPVwibW9kdWxlXCJgXG4gICAgcmV0dXJuICFwYXRoLmVuZHNXaXRoKCcubWpzJykgJiYgJ2RlZmF1bHQnIGluIG1vZFxuICB9XG5cbiAgLyoqXG4gICAqIEltcG9ydCBhIG1vZHVsZSBhbmQgaW50ZXJvcCBpdFxuICAgKi9cbiAgYXN5bmMgaW50ZXJvcGVkSW1wb3J0KHBhdGg6IHN0cmluZykge1xuICAgIGNvbnN0IG1vZCA9IGF3YWl0IGltcG9ydChwYXRoKVxuXG4gICAgaWYgKHRoaXMuc2hvdWxkSW50ZXJvcChwYXRoLCBtb2QpKSB7XG4gICAgICBjb25zdCB0cnlEZWZhdWx0ID0gdGhpcy5oYXNOZXN0ZWREZWZhdWx0KG1vZClcbiAgICAgIHJldHVybiBuZXcgUHJveHkobW9kLCB7XG4gICAgICAgIGdldDogcHJveHlNZXRob2QoJ2dldCcsIHRyeURlZmF1bHQpLFxuICAgICAgICBzZXQ6IHByb3h5TWV0aG9kKCdzZXQnLCB0cnlEZWZhdWx0KSxcbiAgICAgICAgaGFzOiBwcm94eU1ldGhvZCgnaGFzJywgdHJ5RGVmYXVsdCksXG4gICAgICAgIGRlbGV0ZVByb3BlcnR5OiBwcm94eU1ldGhvZCgnZGVsZXRlUHJvcGVydHknLCB0cnlEZWZhdWx0KSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZFxuICB9XG5cbiAgaGFzTmVzdGVkRGVmYXVsdCh0YXJnZXQ6IGFueSkge1xuICAgIHJldHVybiAnX19lc01vZHVsZScgaW4gdGFyZ2V0ICYmIHRhcmdldC5fX2VzTW9kdWxlICYmICdkZWZhdWx0JyBpbiB0YXJnZXQuZGVmYXVsdFxuICB9XG5cbiAgcHJpdmF0ZSBkZWJ1Z0xvZyhtc2c6ICgpID0+IHN0cmluZykge1xuICAgIGlmICh0aGlzLmRlYnVnKVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUubG9nKGBbdml0ZS1ub2RlXSAke21zZygpfWApXG4gIH1cbn1cblxuZnVuY3Rpb24gcHJveHlNZXRob2QobmFtZTogJ2dldCcgfCAnc2V0JyB8ICdoYXMnIHwgJ2RlbGV0ZVByb3BlcnR5JywgdHJ5RGVmYXVsdDogYm9vbGVhbikge1xuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0OiBhbnksIGtleTogc3RyaW5nIHwgc3ltYm9sLCAuLi5hcmdzOiBbYW55PywgYW55P10pIHtcbiAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0W25hbWVdKHRhcmdldCwga2V5LCAuLi5hcmdzKVxuICAgIGlmIChpc1ByaW1pdGl2ZSh0YXJnZXQuZGVmYXVsdCkpXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgaWYgKCh0cnlEZWZhdWx0ICYmIGtleSA9PT0gJ2RlZmF1bHQnKSB8fCB0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJylcbiAgICAgIHJldHVybiBSZWZsZWN0W25hbWVdKHRhcmdldC5kZWZhdWx0LCBrZXksIC4uLmFyZ3MpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbmZ1bmN0aW9uIGV4cG9ydEFsbChleHBvcnRzOiBhbnksIHNvdXJjZU1vZHVsZTogYW55KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2VNb2R1bGUpIHtcbiAgICBpZiAoa2V5ICE9PSAnZGVmYXVsdCcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQoKSB7IHJldHVybiBzb3VyY2VNb2R1bGVba2V5XSB9LFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgY2F0Y2ggKF9lcnIpIHsgfVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm5vcm1hbGl6ZU1vZHVsZUlkIiwic2xhc2giLCJyZXNvbHZlIiwibm9ybWFsaXplUmVxdWVzdElkIiwidG9GaWxlUGF0aCIsInVybCIsInBhdGhUb0ZpbGVVUkwiLCJmaWxlVVJMVG9QYXRoIiwiY3JlYXRlUmVxdWlyZSIsImRpcm5hbWUiLCJ2bSIsImlzTm9kZUJ1aWx0aW4iLCJpc0Fic29sdXRlIiwiZXh0bmFtZSIsImlzUHJpbWl0aXZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRTyxNQUFNLHFCQUF3QixHQUFBO0FBQUEsRUFDbkMsZUFBaUIsRUFBQTtBQUFBLElBQ2YsV0FBQSxFQUFhLENBQUMsRUFBZSxLQUFBLEVBQUE7QUFBQSxJQUM3QixnQkFBbUIsR0FBQTtBQUNqQixNQUFPLE9BQUE7QUFBQSxRQUNMLFFBQVEsTUFBTTtBQUFBLFNBQUM7QUFBQSxRQUNmLE9BQU8sTUFBTTtBQUFBLFNBQUM7QUFBQSxRQUNkLFNBQVMsTUFBTTtBQUFBLFNBQUM7QUFBQSxRQUNoQixTQUFTLE1BQU07QUFBQSxTQUFDO0FBQUEsUUFDaEIsWUFBWSxNQUFNO0FBQUEsU0FBQztBQUFBLFFBQ25CLElBQUksTUFBTTtBQUFBLFNBQUM7QUFBQSxPQUNiLENBQUE7QUFBQSxLQUNGO0FBQUEsSUFDQSxXQUFjLEdBQUE7QUFBQSxLQUFDO0FBQUEsR0FDakI7QUFDRixFQUFBO0FBRU8sTUFBTSx1QkFBdUIsR0FBeUIsQ0FBQTtBQUFBLEVBQzNELGNBQWMsTUFBZ0IsRUFBQTtBQUM1QixJQUFB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
