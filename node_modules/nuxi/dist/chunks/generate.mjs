import { e as execa } from './index4.mjs';
import { r as resolve } from './index3.mjs';
import { isNuxt3 } from '@nuxt/kit';
import { l as loadKit } from './kit.mjs';
import { w as writeTypes } from './prepare.mjs';
import { d as defineNuxtCommand } from './index.mjs';
import 'node:buffer';
import 'node:path';
import 'node:child_process';
import 'node:process';
import 'child_process';
import 'path';
import './_commonjsHelpers.mjs';
import 'fs';
import 'node:url';
import 'os';
import 'node:os';
import 'assert';
import 'events';
import 'buffer';
import 'stream';
import 'util';
import './cjs.mjs';
import 'module';
import 'url';

const generate = defineNuxtCommand({
  meta: {
    name: "generate",
    usage: "npx nuxi generate [rootDir]",
    description: ""
  },
  async invoke(args) {
    process.env.NODE_ENV = process.env.NODE_ENV || "production";
    const rootDir = resolve(args._[0] || ".");
    const { loadNuxt } = await loadKit(rootDir);
    const nuxt = await loadNuxt({ rootDir, config: { _export: true } });
    if (isNuxt3(nuxt)) {
      throw new Error("`nuxt generate` is not supported in Nuxt 3. Please follow this RFC: https://git.io/JKfvx");
    } else {
      await writeTypes(nuxt);
      await nuxt.close();
      await execa("npx", ["nuxt", ...process.argv.slice(2)], { stdio: "inherit" });
    }
  }
});

export { generate as default };
